{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.2;\r\n\r\n/**\r\n * @title SimpleStorage\r\n * @dev Store & retrieve value in a variable\r\n * @custom:dev-run-script ./scripts/deploy_with_ethers.ts\r\n */\r\n\r\n/*get funds from the user \r\nwithdraw them \r\nset a min funding value */\r\n\r\n\r\n//constants and immutable is used to bring the gas down\r\n\r\nimport \"./PriceConverter.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nerror notOwner();\r\n\r\ncontract FundMe {\r\n    using PriceConverter for uint256;\r\n    uint256 public constant minUSD = 50 * 1e18;\r\n    mapping(address => uint256) addressToDonation;\r\n    address[] funders;\r\n    address public owner;\r\n    AggregatorV3Interface public priceFeedValue;\r\n    constructor(address priceFeed){\r\n        owner = msg.sender; //the person who deploys the contract will be the owner \r\n        priceFeedValue = AggregatorV3Interface(priceFeed);\r\n        //constructor is called whenver the contract is deployed\r\n        //same as other prog languages\r\n    }\r\n    function fund() public payable{\r\n        //we want to set m in usd amount\r\n        //smart contracts can hold funds just like our wallets\r\n        //use payable keyword to make it pay-able\r\n        //msg.sender is the value added by the person making transaction or adding fund, can only be done in payable function\r\n        //require keyword helps to maintain the condition\r\n        require(msg.value.getConversionRate(priceFeedValue) > minUSD,\"Did not send enough\");  //did not send enough is revert message\r\n        funders.push(msg.sender);\r\n        addressToDonation[msg.sender] += msg.value;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function withdraw() public onlyOwner {\r\n\r\n\r\n        //first loop through all funders and make their amount 0\r\n        for(uint256 index=0;index < funders.length;index++){\r\n            address funderAddress = funders[index];\r\n            addressToDonation[funderAddress] = 0;\r\n    }\r\n\r\n    //now reset the array\r\n\r\n    funders = new address[](0); // this is the way to reset the array\r\n\r\n    //now we will actually withdraw the funds   (sending eth from contract\r\n    //3 ways  transfer send and call\r\n    //transfer is simplest \r\n//    payable(msg.sender).transfer(address(this).balance);  //this refers to contract (this contract stores the value) & msg.sender is the person calling the withdraw function\r\n    //send helps to revert\r\n    //call is most recommended \r\n    (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n    require(callSuccess,\"call failed\");\r\n\r\n\r\n    }\r\n    modifier onlyOwner {\r\n\r\n        //code below will be executed if i used onlyOwner modifier with my function\r\n        // require(msg.sender == owner,\"not the owner\"); //checking is sender is owner\r\n        //using custom errors makes code more gas efficient\r\n\r\n         if(msg.sender != owner) {revert notOwner(); }   \r\n\r\n        _; //rest of the code after above condition\r\n    }\r\n    //what happends if someone sends this contract ETH without calling fund\r\n    /* Upper thing can happen if we use fallback and recieve =>(special functions) this works at low level interaction  */\r\n    //recieve is triggered only when calldata portion is empty\r\n    //fallback function is called when we put a value in calldata that does not specify a function, so it will then call falbback function which is created without function keyword\r\n\r\n    receive() external payable {\r\n        fund();\r\n     }\r\n    fallback() external payable {\r\n        fund();\r\n     }\r\n\r\n    }"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.2;\r\n\r\n/**\r\n * @title SimpleStorage\r\n * @dev Store & retrieve value in a variable\r\n * @custom:dev-run-script ./scripts/deploy_with_ethers.ts\r\n */\r\n\r\n//This is library\r\n/* Library is similar to contract but i can't have states and cannot send ether*/\r\n//SafeMath is one of the most common library but it was used in versions before 0.8 it is no loner used\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n\r\nlibrary PriceConverter {\r\n    \r\n     function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\r\n        // ABI and Address of datafeed contract are needed\r\n        //0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n         (,int256 price ,,,) = priceFeed.latestRoundData();\r\n        return uint256(price * 1e10);\r\n      //eth in terms of usd\r\n    }\r\n\r\n    // function getVersion() internal view returns (uint256){\r\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\r\n    //     return priceFeed.version();\r\n    // }\r\n\r\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns(uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) /1e18;\r\n        return ethAmountInUsd;\r\n\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}